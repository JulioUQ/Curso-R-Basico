theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
strip.text = element_text(face = "bold", size = 12),
axis.text.y = element_text(size = 8),
axis.text.x = element_text(angle = 30, hjust = 1)
) +
ylim(min(summary_stats$mean_lvalue - summary_stats$se) * 0.95,
max(summary_stats$mean_lvalue + summary_stats$se) * 1.1)
print(league_plot)
# Ruta del archivo
file_path <- file.path(fig_loc, "league_plot.png")
# Guardar el gráfico
ggsave(filename = file_path, plot = league_plot, width = 8, height = 6, dpi = 300, bg = "white")
# Ejecutamos ambos modelos
modelo_aov <- aov(lvalue ~ league, data = ffemale_full)
modelo_lm <- lm(lvalue ~ league, data = ffemale_full)
# Extraemos los resúmenes
resumen_aov <- summary(modelo_aov)[[1]]
resumen_lm  <- anova(modelo_lm)
# Creamos un dataframe combinando los resultados
comparacion <- data.frame(
Fuente = rownames(resumen_aov),
Df_aov = resumen_aov$Df,
`Sum Sq_aov` = resumen_aov$`Sum Sq`,
`Mean Sq_aov` = resumen_aov$`Mean Sq`,
`F value_aov` = resumen_aov$`F value`,
`Pr(>F)_aov` = resumen_aov$`Pr(>F)`,
Df_lm = resumen_lm$Df,
`Sum Sq_lm` = resumen_lm$`Sum Sq`,
`Mean Sq_lm` = resumen_lm$`Mean Sq`,
`F value_lm` = resumen_lm$`F value`,
`Pr(>F)_lm` = resumen_lm$`Pr(>F)`
)
# Mostramos el resultado
comparacion
# Ejecutamos ambos modelos
modelo_aov <- aov(lvalue ~ league, data = ffemale_full)
modelo_lm <- lm(lvalue ~ league, data = ffemale_full)
# Extraemos los resúmenes
resumen_aov <- summary(modelo_aov)[[1]]
resumen_lm  <- anova(modelo_lm)
# Creamos un dataframe combinando los resultados
comparacion <- data.frame(
Fuente = rownames(resumen_aov),
Df_aov = resumen_aov$Df,
`Sum Sq_aov` = resumen_aov$`Sum Sq`,
`Mean Sq_aov` = resumen_aov$`Mean Sq`,
`F value_aov` = resumen_aov$`F value`,
`Pr(>F)_aov` = resumen_aov$`Pr(>F)`,
Df_lm = resumen_lm$Df,
`Sum Sq_lm` = resumen_lm$`Sum Sq`,
`Mean Sq_lm` = resumen_lm$`Mean Sq`,
`F value_lm` = resumen_lm$`F value`,
`Pr(>F)_lm` = resumen_lm$`Pr(>F)`
)
# Mostramos el resultado
print(comparacion)
print(comparacion)
# Ejecutamos ambos modelos
modelo_aov <- aov(lvalue ~ league, data = ffemale_full)
modelo_lm <- lm(lvalue ~ league, data = ffemale_full)
# Extraemos los resúmenes
resumen_aov <- summary(modelo_aov)[[1]]
resumen_lm  <- anova(modelo_lm)
# Creamos dataframes separados con etiquetas de fuente
aov_df <- data.frame(
Fuente = paste(rownames(resumen_aov), "aov", sep = "_"),
Df = resumen_aov$Df,
`Sum Sq` = resumen_aov$`Sum Sq`,
`Mean Sq` = resumen_aov$`Mean Sq`,
`F value` = resumen_aov$`F value`,
`Pr(>F)` = resumen_aov$`Pr(>F)`
)
lm_df <- data.frame(
Fuente = paste(rownames(resumen_lm), "lm", sep = "_"),
Df = resumen_lm$Df,
`Sum Sq` = resumen_lm$`Sum Sq`,
`Mean Sq` = resumen_lm$`Mean Sq`,
`F value` = resumen_lm$`F value`,
`Pr(>F)` = resumen_lm$`Pr(>F)`
)
# Combinamos ambos
comparacion <- rbind(aov_df, lm_df)
# Mostramos el resultado
comparacion
#> Grados de libertad
df_between = df_league = 5
df_within = df_residuals = 2239
df_total = df_between + df_within # = 2244
#> Cálculo de SSB, SSW y SST desde el resumen del modelo aov
SSB <- resumen_aov[[2]][1]
SSW <- resumen_aov[[2]][2]
SST <- SSB + SSW
#> Extraemos los grados de libertad desde el resumen
df_between <- resumen_aov[[1]][1]
df_within <- resumen_aov[[1]][2]
#> Calculamos las medias cuadráticas
MSB <- SSB / df_between   # Mean square between groups
MSW <- SSW / df_within    # Mean square within groups
#> Calculamos el valor F manualmente
F_manual <- MSB / MSW
#> Valor crítico para un nivel de confianza del 95%
alpha <- 0.05
F_crit <- qf(1 - alpha, df_between, df_within)
#> Cálculo manual del valor p
p_manual <- 1 - pf(F_manual, df_between, df_within)
#> Tabla resumen con las variables clave
tabla_anova_manual <- data.frame(
Componente = c("SSB (Entre grupos)", "SSW (Dentro de los grupos)", "SST (Total)"),
`Suma de cuadrados` = c(SSB, SSW, SST),
`Grados de libertad` = c(df_between, df_within, df_between + df_within)
)
tabla_anova_manual
#> Grados de libertad
df_between = df_league = 5
df_within = df_residuals = 2239
df_total = df_between + df_within # = 2244
#> Cálculo de SSB, SSW y SST desde el resumen del modelo aov
SSB <- resumen_aov[[2]][1]
SSW <- resumen_aov[[2]][2]
SST <- SSB + SSW
#> Extraemos los grados de libertad desde el resumen
df_between <- resumen_aov[[1]][1]
df_within <- resumen_aov[[1]][2]
#> Calculamos las medias cuadráticas
MSB <- SSB / df_between   # Mean square between groups
MSW <- SSW / df_within    # Mean square within groups
#> Calculamos el valor F manualmente
F_manual <- MSB / MSW
#> Valor crítico para un nivel de confianza del 95%
alpha <- 0.05
F_crit <- qf(1 - alpha, df_between, df_within)
#> Cálculo manual del valor p
p_manual <- 1 - pf(F_manual, df_between, df_within)
# Tabla resumen extendida
tabla_anova_manual <- data.frame(
Componente = c("SSB (Entre grupos)", "SSW (Dentro de los grupos)", "SST (Total)",
"F calculado", "F crítico (95%)", "p-valor"),
`Valor` = c(round(SSB, 3), round(SSW, 3), round(SST, 3),
round(F_manual, 3), round(F_crit, 3), signif(p_manual, 4)),
`Grados de libertad` = c(df_between, df_within, df_total, NA, NA, NA)
)
tabla_anova_manual
#> Grados de libertad
df_between = df_league = 5
df_within = df_residuals = 2239
df_total = df_between + df_within # = 2244
#> Cálculo de SSB, SSW y SST desde el resumen del modelo aov
SSB <- resumen_aov[[2]][1]
SSW <- resumen_aov[[2]][2]
SST <- SSB + SSW
#> Extraemos los grados de libertad desde el resumen
df_between <- resumen_aov[[1]][1]
df_within <- resumen_aov[[1]][2]
#> Calculamos las medias cuadráticas
MSB <- SSB / df_between   # Mean square between groups
MSW <- SSW / df_within    # Mean square within groups
#> Calculamos el valor F manualmente
F_manual <- MSB / MSW
#> Valor crítico para un nivel de confianza del 95%
alpha <- 0.05
F_crit <- qf(1 - alpha, df_between, df_within)
#> Cálculo manual del valor p
p_manual <- 1 - pf(F_manual, df_between, df_within)
# Tabla resumen extendida
tabla_anova_manual <- data.frame(
Componente = c("SSB (Entre grupos)", "SSW (Dentro de los grupos)", "SST (Total)",
"F calculado", "F crítico (95%)", "p-valor"),
`Valor` = c(round(SSB, 3), round(SSW, 3), round(SST, 3),
round(F_manual, 3), round(F_crit, 3), signif(p_manual, 4)),
`Grados de libertad` = c(df_between, df_within, df_total, NA, NA, NA)
)
# Mostrar la tabla con kable
knitr::kable(tabla_anova_manual, caption = "Tabla 4. Resumen de los componentes del anova")
# Ruta del archivo
file_path <- file.path(Output_loc, "tabla_anova_manual.csv")
# Guardar como CSV
write.csv(tabla_anova_manual, file = file_path, row.names = FALSE)
#> Representación gráfica de la distribución F
x <- seq(0, 5 * F_crit, length.out = 500)
y <- df(x, df1 = df_between, df2 = df_within)
df_f <- data.frame(x = x, y = y)
Fdistribution_plot <- ggplot(df_f, aes(x = x, y = y)) +
geom_line(size = 1.2, color = "steelblue") +
geom_area(data = subset(df_f, x >= F_crit), aes(y = y), fill = "red", alpha = 0.4) +
geom_vline(xintercept = F_crit, linetype = "dashed", color = "darkred", size = 1) +
geom_vline(xintercept = F_manual, linetype = "solid", color = "darkgreen", size = 1) +
annotate("text", x = F_crit, y = max(y)*0.8, label = paste0("F crítico = ", round(F_crit, 3)),
color = "darkred", angle = 90, vjust = -0.5) +
annotate("text", x = F_manual, y = max(y)*0.6, label = paste0("F calculado = ", round(F_manual, 3)),
color = "darkgreen", angle = 90, vjust = -0.5) +
labs(title = "Distribución F y valores críticos del ANOVA",
subtitle = paste0("p-valor = ", signif(p_manual, 4)),
x = "Valor F",
y = "Densidad") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
strip.text = element_text(face = "bold", size = 12),
axis.text.y = element_text(size = 8),
axis.text.x = element_text(angle = 30, hjust = 1)
)
print(Fdistribution_plot)
# Ruta del archivo
file_path <- file.path(fig_loc, "Fdistribution_plot.png")
# Guardar el gráfico
ggsave(filename = file_path, plot = Fdistribution_plot, width = 8, height = 6, dpi = 300, bg = "white")
# Obtener y transformar los resultados
emm_df <- as.data.frame(emmeans(modelo_lm, specs = "league"))
library(emmeans)
# Obtener y transformar los resultados
emm_df <- as.data.frame(emmeans(modelo_lm, specs = "league"))
# Ordenar de mayor a menor
emm_df <- emm_df %>%
arrange(desc(emmean)) %>%
mutate(league = factor(league, levels = league))
# Gráfico con puntos y líneas de error
emm_plot <- ggplot(emm_df, aes(x = league, y = emmean)) +
geom_point(size = 4, color = "#1f78b4") +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.15, color = "#1f78b4") +
labs(
title = "Medias ajustadas del valor de mercado (log) por liga",
x = "Liga", y = "Log(valor de mercado)"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
strip.text = element_text(face = "bold", size = 12),
axis.text.y = element_text(size = 8),
axis.text.x = element_text(angle = 30, hjust = 1)
)
print(emm_plot)
# Ruta del archivo
file_path <- file.path(fig_loc, "emm_plot.png")
# Guardar el gráfico
ggsave(filename = file_path, plot = emm_plot, width = 8, height = 6, dpi = 300, bg = "white")
eta_squared <- SSB / SST
eta_squared
comparaciones_bonferroni <- pairwise.t.test(
x = ffemale_full$lvalue,
g = ffemale_full$league,
p.adjust.method = "bonferroni"
)
# Mostrar resultados
comparaciones_bonferroni
# Test de comparaciones múltiples con corrección de Bonferroni
comparaciones_bonferroni <- pairwise.t.test(
x = ffemale_full$lvalue,
g = ffemale_full$league,
p.adjust.method = "bonferroni"
)
# Mostrar resultados
comparaciones_bonferroni
# Crear variable dicotómica: es internacional si tiene team_national_id
ffemale_full$international <- ifelse(is.na(ffemale_full$team_national_id), "No", "Yes")
View(ffemale_full)
names(ffemale_full)
# Crear variable dicotómica: es internacional si tiene team_national_id
ffemale_full$international <- ifelse(is.na(ffemale_full$nation_team_id), "No", "Yes")
# Convertir a factor
ffemale_full$international <- factor(ffemale_full$international, levels = c("No", "Yes"))
# Agrupar y calcular estadisticas
resumen_grupos <- ffemale_full %>%
group_by(league, international) %>%
summarise(
media = mean(lvalue, na.rm = TRUE),
sd = sd(lvalue, na.rm = TRUE),
n = n(),
.groups = "drop"
)
resumen_grupos
# Crear variable dicotómica: es internacional si tiene team_national_id
ffemale_full$international <- ifelse(is.na(ffemale_full$nation_team_id), "No", "Yes")
# Convertir a factor
ffemale_full$international <- factor(ffemale_full$international, levels = c("No", "Yes"))
# Agrupar y calcular estadisticas
resumen_grupos <- ffemale_full %>%
group_by(league, international) %>%
summarise(
media = mean(lvalue, na.rm = TRUE),
sd = sd(lvalue, na.rm = TRUE),
n = n(),
.groups = "drop"
)
resumen_grupos
interaction.plot(
x.factor = ffemale_full$league,
trace.factor = ffemale_full$international,
response = ffemale_full$lvalue,
fun = mean,
col = c("blue", "red"),
legend = TRUE,
xlab = "Liga",
ylab = "Log(valor de mercado)",
trace.label = "¿Internacional?",
main = "Gráfico de interacción: Liga e Internacionalidad"
)
interaction_plot <- interaction.plot(
x.factor = ffemale_full$league,
trace.factor = ffemale_full$international,
response = ffemale_full$lvalue,
fun = mean,
col = c("blue", "red"),
legend = TRUE,
xlab = "Liga",
ylab = "Log(valor de mercado)",
trace.label = "¿Internacional?",
main = "Gráfico de interacción: Liga e Internacionalidad"
)
print(interaction_plot)
# Ruta del archivo
file_path <- file.path(fig_loc, "interaction_plot.png")
# Guardar el gráfico
ggsave(filename = file_path, plot = interaction_plot, width = 8, height = 6, dpi = 300, bg = "white")
interaction_plot <- interaction.plot(
x.factor = ffemale_full$league,
trace.factor = ffemale_full$international,
response = ffemale_full$lvalue,
fun = mean,
col = c("blue", "red"),
legend = TRUE,
xlab = "Liga",
ylab = "Log(valor de mercado)",
trace.label = "¿Internacional?",
main = "Gráfico de interacción: Liga e Internacionalidad"
)
print(interaction_plot)
# Ruta del archivo
file_path <- file.path(fig_loc, "interaction_plot.png")
# Guardar el gráfico
ggsave(filename = file_path, plot = interaction_plot, width = 8, height = 6, dpi = 300, bg = "white")
library(dplyr)
library(ggplot2)
# Calcular medias agrupadas
df_interaccion <- ffemale_full %>%
group_by(league, international) %>%
summarise(
media_lvalue = mean(lvalue, na.rm = TRUE),
sd_lvalue = sd(lvalue, na.rm = TRUE),
n = n()
) %>%
ungroup()
# Crear gráfico de interacción con ggplot2
interaction_plot <- ggplot(df_interaccion, aes(x = league, y = media_lvalue, color = international, group = international)) +
geom_line(linewidth = 1.2) +
geom_point(size = 3) +
labs(
title = "Interacción entre liga e internacionalidad",
x = "Liga",
y = "Media del log(valor de mercado)",
color = "¿Internacional?"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Mostrar el gráfico
print(interaction_plot)
# Guardar el gráfico
ggsave(filename = "interaction_plot.png", plot = interaction_plot, width = 8, height = 6, dpi = 300, bg = "white")
# Calcular medias agrupadas
df_interaccion <- ffemale_full %>%
group_by(league, international) %>%
summarise(
media_lvalue = mean(lvalue, na.rm = TRUE),
sd_lvalue = sd(lvalue, na.rm = TRUE),
n = n()
) %>%
ungroup()
# Crear gráfico de interacción con ggplot2
interaction_plot <- ggplot(df_interaccion, aes(x = league, y = media_lvalue, color = international, group = international)) +
geom_line(linewidth = 1.2) +
geom_point(size = 3) +
labs(
title = "Interacción entre liga e internacionalidad",
x = "Liga",
y = "Media del log(valor de mercado)",
color = "¿Internacional?"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
strip.text = element_text(face = "bold", size = 12),
axis.text.y = element_text(size = 8),
axis.text.x = element_text(angle = 30, hjust = 1)
)
# Ruta del archivo
file_path <- file.path(fig_loc, "interaction_plot.png")
# Guardar el gráfico
ggsave(filename = file_path, plot = interaction_plot, width = 8, height = 6, dpi = 300, bg = "white")
# Calcular medias agrupadas
df_interaccion <- ffemale_full %>%
group_by(league, international) %>%
summarise(
media_lvalue = mean(lvalue, na.rm = TRUE),
sd_lvalue = sd(lvalue, na.rm = TRUE),
n = n()
) %>%
ungroup()
# Crear gráfico de interacción con ggplot2
interaction_plot <- ggplot(df_interaccion, aes(x = league, y = media_lvalue, color = international, group = international)) +
geom_line(linewidth = 1.2) +
geom_point(size = 3) +
labs(
title = "Interacción entre liga e internacionalidad",
x = "Liga",
y = "Media del log(valor de mercado)",
color = "¿Internacional?"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Ruta del archivo
file_path <- file.path(fig_loc, "interaction_plot.png")
# Guardar el gráfico
ggsave(filename = file_path, plot = interaction_plot, width = 8, height = 6, dpi = 300, bg = "white")
# Calcular medias agrupadas
df_interaccion <- ffemale_full %>%
group_by(league, international) %>%
summarise(
media_lvalue = mean(lvalue, na.rm = TRUE),
sd_lvalue = sd(lvalue, na.rm = TRUE),
n = n()
) %>%
ungroup()
# Crear gráfico de interacción con ggplot2
interaction_plot <- ggplot(df_interaccion, aes(x = league, y = media_lvalue, color = international, group = international)) +
geom_line(linewidth = 1.2) +
geom_point(size = 3) +
labs(
title = "Interacción entre liga e internacionalidad",
x = "Liga",
y = "Media del log(valor de mercado)",
color = "¿Internacional?"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
strip.text = element_text(face = "bold", size = 12),
axis.text.y = element_text(size = 8),
axis.text.x = element_text(angle = 30, hjust = 1)
)
print(interaction_plot)
# Ruta del archivo
file_path <- file.path(fig_loc, "interaction_plot.png")
# Guardar el gráfico
ggsave(filename = file_path, plot = interaction_plot, width = 8, height = 6, dpi = 300, bg = "white")
# Modelo ANOVA con interacción
modelo_anova <- aov(lvalue ~ league * international, data = ffemale_full)
# Resumen del modelo
summary(modelo_anova)
setwd("C:/Users/jubeda2/Downloads/Curso R Basico/Modulo 2. Matrices, factores y datatables")
library(readxl)
DatosPesca <- read_excel("3. Datos/DatosPesca.xlsx")
View(DatosPesca)
rm(list=ls())
#--------------ESPACIO DE TRABAJO Y RUTAS RELATIVAS---------------#
home_file  = "C:/Users/jubeda2/Desktop/Tragsatec/Reunion ISSG DataQuality (RCG MedBS)"
data_loc   = paste0(home_file, "/1. Data/")
fig_loc    = paste0(home_file, "/3. Figura_y_graficos/")
Output_loc = paste0(home_file, "/4. Outputs/")
DatosPesca <- read_excel("3. Datos/DatosPesca.xlsx")
# List of necessary libraries to load
Packages <- c("RDBqc", "knitr", "kableExtra", "dplyr", "ggplot2", "rworldmap", "sp", "rworldxtra", "pander", "data.table",
"grDevices", "magrittr", "tictoc", "tidyverse", "fishmethods", "tidyr", "gridExtra")
# Instalar los paquetes que no estén instalados
new_packages <- Packages[!(Packages %in% installed.packages()[,"Package"])]
setwd("C:/Users/jubeda2/Downloads/Curso R Basico/Modulo 2. Matrices, factores y datatables")
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
error = FALSE
)
# 1. Definimos la ruta del archivo de datos
file_path <- paste0(data_loc, "DatosPesca.xlsx")
# 2. Leemos los datos desde el archivo Excel
df <- read_excel(file_path)
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
error = FALSE
)
rm(list=ls())
#--------------ESPACIO DE TRABAJO Y RUTAS RELATIVAS---------------#
# Modificar por el path del directorio de trabajo
home_file  = "C:/Users/jubeda2/Downloads/Curso R Basico/Modulo 2. Matrices, factores y datatables"
data_loc   = paste0(home_file,"/3. Datos/")
fig_loc    = paste0(home_file,"/4. Figuras y graficos/")
Output_loc = paste0(home_file, "/5. Outputs/")
#--------------PAQUETES NECESARIOS PARA EL CURSO---------------#
Packages = c("tidyverse", "kableExtra", "knitr")
# Instalar los paquetes que no estén instalados
new_packages <- Packages[!(Packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
# Cargar los paquetes
lapply(Packages, library, character.only = TRUE)
# 1. Definimos la ruta del archivo de datos
file_path <- paste0(data_loc, "DatosPesca.xlsx")
# 2. Leemos los datos desde el archivo Excel
df <- read_excel(file_path)
# 3. Mostramos la estructura del dataset
cat("La estructura del conjunto de datos de pesqueros en la zona 27:\n\n")
str(df)
# Cargar estructura general
glimpse(DatosPesca)
# Cargar estructura general
glimpse(df)
# Ver primeras filas
head(df)
```{r}
str(df)
